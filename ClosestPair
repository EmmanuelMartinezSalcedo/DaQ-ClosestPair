#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;
void swapx(vector<vector<int>>& arr, int a, int b) {
    vector<int> temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
}

int partitionx(vector<vector<int>>& arr, int start, int end) {
    int pivotIndex = start;
    int pivotValue = arr[start][0];

    for (int i = start + 1; i <= end; i++) {
        if (arr[i][0] <= pivotValue) {
            pivotIndex++;
            swapx(arr, pivotIndex, i);
        }
    }

    swapx(arr, start, pivotIndex);
    return pivotIndex;
}

void quickSortx(vector<vector<int>>& arr, int start, int end){
    if (start >= end) {
        return;
    }
    int p = partitionx(arr, start, end);
    quickSortx(arr, start, p - 1);
    quickSortx(arr, p + 1, end);
}

void swapy(vector<vector<int>>& arr, int a, int b) {
    vector<int> temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
}

int partitiony(vector<vector<int>>& arr, int start, int end) {
    int pivotIndex = start;
    int pivotValue = arr[start][1]; // Comparar la coordenada y

    for (int i = start + 1; i <= end; i++) {
        if (arr[i][1] <= pivotValue) { // Comparar la coordenada y
            pivotIndex++;
            swapy(arr, pivotIndex, i);
        }
    }

    swapy(arr, start, pivotIndex);
    return pivotIndex;
}

void quickSorty(vector<vector<int>>& arr, int start, int end) {
    if (start >= end) {
        return;
    }
    int p = partitiony(arr, start, end);
    quickSorty(arr, start, p - 1);
    quickSorty(arr, p + 1, end);
}

void SeparatePoints(vector<vector<int>>& points, vector<vector<int>>& array1, vector<vector<int>>& array2) {
    int aux1 = 0;
    int aux2 = 0;
    int size = points.size();
    for (int i = 0; i < size; i++) {
        if (points[i][0] <= size / 2) {
            array1.push_back(points[i]);
            aux1++;
        } else {
            array2.push_back(points[i]);
            aux2++;
        }
    }
}

float distanceBetweenPoints(vector<int>& point1, vector<int>& point2) {
    int x1 = point1[0];
    int y1 = point1[1];
    int x2 = point2[0];
    int y2 = point2[1];

    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
    return distance;
}

vector<vector<int>> filterPointsInRange(vector<vector<int>>& points, float L, float mindistance) {
    vector<vector<int>> filteredPoints;
    for (vector<int>& point : points) {
        int x = point[0];
        if (x >= (L - mindistance) && x <= (L + mindistance)) {
            filteredPoints.push_back(point);
        }
    }
    return filteredPoints;
}



vector<vector<int>> ClosestPair(vector<vector<int>> Points)
{
  int size = Points.size();
  int half = size/2;
  quickSortx(Points, 0, size - 1);
  vector<vector<int>> PointsIzq;
  vector<vector<int>> PointsDer;
  SeparatePoints(Points, PointsIzq, PointsDer);
  int Minx = PointsIzq[PointsIzq.size() - 1][0];
  int Maxx = PointsDer[0][0];
  float L=(Minx+Maxx)/2;

  vector<vector<int>> Par1 = ClosestPair(PointsIzq);
  vector<vector<int>> Par2 = ClosestPair(PointsDer);
  vector<vector<int>> ParR;
  float distance1 = distanceBetweenPoints(Par1[0], Par1[1]);
  float distance2 = distanceBetweenPoints(Par2[0], Par2[1]);
  if (distance1<distance2)
  {
    ParR = Par1;
  }
  else
  {
    ParR = Par2;
  }
  float minDistance = min(distance1, distance2);

  vector<vector<int>> PointsRestantes = filterPointsInRange(Points, L, minDistance);
  quickSorty(PointsRestantes, 0, PointsRestantes.size());

  for (int i=1;i<PointsRestantes.size();i++)
    {
      int j=i-1;
      while(PointsRestantes[i][1] - PointsRestantes[j][1] < minDistance)
        {
          if (distanceBetweenPoints(PointsRestantes[i], PointsRestantes[j]) < minDistance)
          {
            minDistance=distanceBetweenPoints(PointsRestantes[i], PointsRestantes[j]);
            ParR.clear();
            ParR.push_back(PointsRestantes[i]);
            ParR.push_back(PointsRestantes[j]);
          }
          j--;
        }
    }
  
  return ParR;
}
int main() {
  vector<vector<int>> Puntos={{1,3},{5,3},{7,7},{8,6},{10,9},{8,1},{2,6},{3,3},{4,7},{9,6}};
  vector<vector<int>> Par = ClosestPair(Puntos);
  for (int i=0;i<Par.size();i++)
    {
      cout<<Par[i][0]<<" "<<Par[i][1]<<endl;
    }
}
